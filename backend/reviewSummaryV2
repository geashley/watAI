import os
from dotenv import load_dotenv
from groq import Groq
import json

# Load environment variables from .env file
load_dotenv()

# Get the API key from environment variables
api_key = os.getenv("GROQ_API_KEY")
if not api_key:
    raise ValueError("API key not found")

client = Groq(api_key=api_key)

def get_ai_summary(text):
    prompt = (
        "Based on the following reviews, please provide a structured summary that includes:\n"
        "1. An overall summary of the product in your own words.\n"
        "2. The top 3 pros in bullet points.\n"
        "3. The top 3 cons in bullet points.\n\n"
        f"{text}\n\n"
    )
    
    response = client.chat.completions.create(
        messages=[
            {"role": "user", "content": prompt}
        ],
        model="llama-3.3-70b-versatile",
    )
    
    return response.choices[0].message.content

def analyze_reviews(reviews):
    all_reviews_text = "\n".join([f"Review: {review['text']} (Rating: {review['rating']})" for review in reviews])
    
    structured_summary = get_ai_summary(all_reviews_text)
    
    return structured_summary

def generate_summary(reviews):
    structured_summary = analyze_reviews(reviews)
    
    return structured_summary

try:
    with open('reviews.json', 'r') as file:
        data = json.load(file)
        reviews = data['reviews']

    # Generate and print summary
    summary = generate_summary(reviews)
    print("\nAI-Generated Review Summary:")
    print("=" * 80)
    print(summary)
    print("=" * 80)

except FileNotFoundError:
    print("Error: reviews.json file not found!")
except json.JSONDecodeError:
    print("Error: Invalid JSON format in reviews.json!")
except Exception as e:
    print(f"An error occurred: {str(e)}")